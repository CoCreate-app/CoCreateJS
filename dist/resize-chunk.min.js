(this.webpackChunkCoCreate=this.webpackChunkCoCreate||[]).push([[9803],{905:function(module){var F;F=function(){return(()=>{"use strict";var __webpack_modules__={"../CoCreate-observer/src/index.js":(__unused_webpack_module,exports)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = void 0;\n// window.addEventListener("load", () => {\n\n/*\nCoCreate.observer.init({ \n\tname: \'CoCreateFetchInit\', // no usage, just to provide for console debugging \n\tobserve: [\'subtree\', \'childList\',\'attributes\'], // the same parameters of options in #https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/observe\n\tattributes: [\'data-fetch_collection\'], // it doesn\'t count added nodes or remove nodes\n\tinclude: ".classname", // a selector to select only elements that matches\n\texclude: ".classname", // a selector to exclude elements from processing\n\tcallback: function(mutation) { // a function which gets a mutation object according to #https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord\n\t\tCoCreateFetch.initElement(mutation.target)\n\t}\n})\n*/\n\n/**\n * description\n * \n * @param {String} [name] - an optional name to provide for debugging console\n * @param {Array} observe - a list of mutation type to be observerd, a mix of possible `attributes`, `childList` or `subtree`\n * ... and other params can be here \n * \n * @return null\n */\nwindow.profiler = {};\nwindow.counter = 0;\nwindow.counter2 = 0;\nwindow.targets = {};\nwindow.attributeName = {};\n\nif (!Element.prototype.matches) {\n  Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n    var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n        i = matches.length;\n\n    while (--i >= 0 && matches.item(i) !== this) {}\n\n    return i > -1;\n  };\n}\n\nconst CoCreateObserver = {\n  initTasks: new Map(),\n  attrTasks: new Map(),\n  rules: new Map(),\n  rulesArray: [],\n  __init: function () {\n    const self = this;\n    const observer = new MutationObserver((mutationsList, observer) => self.__callback(mutationsList, observer)); // setTimeout(()=>{\n\n    observer.observe(document.body, {\n      attributes: true,\n      childList: true,\n      subtree: true,\n      characterData: false,\n      attributeOldValue: true,\n      characterData: true\n    });\n  },\n  // init: function(data) {\n  //   this.add(data);\n  // },\n  init: function ({\n    observe,\n    include,\n    exclude,\n    attributes,\n    name,\n    callback\n  }) {\n    // if (name == \'ccAttribute\' || name == \'ccCss\') {\n    if (observe.some(x => x == "childList")) {\n      this.initTasks.set(callback, {\n        observe,\n        include,\n        exclude,\n        attributes,\n        name\n      });\n    }\n\n    if (observe.some(x => x == "attributes")) {\n      this.attrTasks.set(callback, {\n        observe,\n        include,\n        exclude,\n        attributes,\n        name\n      });\n    } // }\n\n  },\n  remove: function (callback) {\n    this.initTasks.delete(callback);\n    this.attrTasks.delete(callback);\n  },\n  addRule: function ({\n    include,\n    exclude,\n    name\n  }) {\n    this.rules.set(name, {\n      include,\n      exclude\n    });\n    this.rulesArray = Array.from(this.rules);\n  },\n  removeRule: function ({\n    name\n  }) {\n    this.rules.delete(name);\n    this.rulesArray = Array.from(this.rules);\n  },\n  __callback: function (mutationsList, observer) {\n    // console.log(this)\n    window.counter++;\n\n    for (let mutation of mutationsList) {\n      if (mutation.type == "childList" && mutation.addedNodes.length > 0) {\n        //. run init functions\n        this.__initCallback(mutation);\n      }\n\n      if (mutation.type == "attributes") {\n        //. run attributes functions\n        this.__attrCallback(mutation);\n      }\n    }\n  },\n  __initCallback: function (mutation) {\n    let addedNodes = Array.from(mutation.addedNodes);\n    this.initTasks.forEach(({\n      observe,\n      include,\n      exclude,\n      attributes,\n      name\n    }, callback) => {\n      mutation.addedNodes.forEach(el => {\n        if (!el.tagName) return;\n\n        if (include && !(el.matches(include) || el.querySelector(include))) {\n          return;\n        }\n\n        if (exclude && (el.matches(exclude) || el.querySelector(exclude))) {\n          return;\n        }\n\n        if (el.created) return;\n        window.counter2++;\n        window.profiler[name] = window.profiler[name] != undefined ? window.profiler[name] + 1 : 0;\n        window.targets[mutation.target.id || mutation.target.tagName] = window.targets[mutation.target.id || mutation.target.tagName] != undefined ? window.targets[mutation.target.id || mutation.target.tagName] + 1 : 0;\n        window.attributeName[mutation.attributeName] = window.attributeName[mutation.attributeName] != undefined ? window.attributeName[mutation.attributeName] + 1 : 0;\n        callback.apply(null, [{\n          type: mutation.type,\n          target: el\n        }]);\n      });\n    });\n    addedNodes.map(el => el.created = true);\n  },\n  __attrCallback: function (mutation) {\n    for (let [name, {\n      include,\n      exclude\n    }] of this.rulesArray) {\n      if (include && !mutation.target.matches(include)) return;\n      if (exclude && mutation.target.matches(exclude)) return;\n    }\n\n    this.attrTasks.forEach(({\n      observe,\n      include,\n      exclude,\n      attributes,\n      name\n    }, callback) => {\n      if (attributes && mutation.attributeName && !attributes.includes(mutation.attributeName)) {\n        return;\n      }\n\n      if (include && !mutation.target.matches(include)) return;\n      if (exclude && mutation.target.matches(exclude)) return;\n\n      if (mutation.attributeName) {\n        let newValue = mutation.target.getAttribute(mutation.attributeName);\n\n        if (newValue != mutation.oldValue) {\n          window.counter2++;\n          window.profiler[name] = window.profiler[name] != undefined ? window.profiler[name] + 1 : 0;\n          window.targets[mutation.target.id || mutation.target.tagName] = window.targets[mutation.target.id || mutation.target.tagName] != undefined ? window.targets[mutation.target.id || mutation.target.tagName] + 1 : 0;\n          window.attributeName[mutation.attributeName] = window.attributeName[mutation.attributeName] != undefined ? window.attributeName[mutation.attributeName] + 1 : 0;\n          callback.apply(null, [mutation]);\n        }\n      }\n    });\n  },\n  setInitialized: function (element, type) {\n    // element.setAttribute(`initialized_${type}`, "true");\n    type = type || "";\n    let key = "co_initialized_" + type;\n    element[key] = true;\n  },\n  getInitialized: function (element, type) {\n    type = type || "";\n    let key = "co_initialized_" + type;\n\n    if (!element[key]) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n};\n\nCoCreateObserver.__init();\n\nvar _default = CoCreateObserver;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-observer/src/index.js\n')},"./src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\n__webpack_require__(/*! ./style.css */ \"./src/style.css\");\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"../CoCreate-observer/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst coCreateResizeWidgets = {\n  selector: '',\n  //'.resize',\n  resizers: [],\n  resizeWidgets: [],\n  init: function (handleObj) {\n    for (var handleKey in handleObj) if (handleObj.hasOwnProperty(handleKey) && handleKey == 'selector') this.selector = handleObj[handleKey];\n\n    this.resizers = document.querySelectorAll(this.selector);\n\n    var _this = this;\n\n    this.resizers.forEach(function (resize, idx) {\n      let resizeWidget = new CoCreateResize(resize, handleObj);\n      _this.resizeWidgets[idx] = resizeWidget;\n    });\n  },\n  initElement: function (target) {\n    let resizeWidget = new CoCreateResize(target, {\n      dragLeft: \"[data-resize_handle='left']\",\n      dragRight: \"[data-resize_handle='right']\",\n      dragTop: \"[data-resize_handle='top']\",\n      dragBottom: \"[data-resize_handle='bottom']\"\n    });\n    this.resizeWidgets[0] = resizeWidget;\n  }\n};\n\nfunction CoCreateResize(resizer, options) {\n  this.resizeWidget = resizer;\n  this.cornerSize = 10;\n  this.init(options);\n}\n\nCoCreateResize.prototype = {\n  init: function (handleObj) {\n    if (this.resizeWidget) {\n      this.leftDrag = this.resizeWidget.querySelector(handleObj['dragLeft']);\n      this.rightDrag = this.resizeWidget.querySelector(handleObj['dragRight']);\n      this.topDrag = this.resizeWidget.querySelector(handleObj['dragTop']);\n      this.bottomDrag = this.resizeWidget.querySelector(handleObj['dragBottom']);\n      this.bindListeners();\n      this.initResize();\n    }\n  },\n  initResize: function () {\n    if (this.leftDrag) {\n      this.addListenerMulti(this.leftDrag, 'mousemove touchmove', this.checkLeftDragTopCorner);\n      this.addListenerMulti(this.leftDrag, 'mousemove touchmove', this.checkLeftDragBottomCorner);\n    }\n\n    if (this.topDrag) {\n      this.addListenerMulti(this.topDrag, 'mousemove touchmove', this.checkTopDragLeftCorner);\n      this.addListenerMulti(this.topDrag, 'mousemove touchmove', this.checkTopDragRightCorner);\n    }\n\n    if (this.rightDrag) {\n      this.addListenerMulti(this.rightDrag, 'mousemove touchmove', this.checkRightDragTopCorner);\n      this.addListenerMulti(this.rightDrag, 'mousemove touchmove', this.checkRightDragBottomCorner);\n    }\n\n    if (this.bottomDrag) {\n      this.addListenerMulti(this.bottomDrag, 'mousemove touchmove', this.checkBottomDragLeftCorner);\n      this.addListenerMulti(this.bottomDrag, 'mousemove touchmove', this.checkBottomDragRightCorner);\n    }\n  },\n  initTopDrag: function (e) {\n    this.processIframe();\n    this.startTop = parseInt(document.defaultView.getComputedStyle(this.resizeWidget).top, 10);\n    this.startHeight = parseInt(document.defaultView.getComputedStyle(this.resizeWidget).height, 10);\n    if (e.touches) this.startY = e.touches[0].clientY;else this.startY = e.clientY;\n    this.addListenerMulti(document.documentElement, 'mousemove touchmove', this.doTopDrag);\n    this.addListenerMulti(document.documentElement, 'mouseup touchend', this.stopDrag);\n  },\n  doTopDrag: function (e) {\n    let top, height;\n    if (e.touches) e = e.touches[0];\n    top = this.startTop + e.clientY - this.startY;\n    height = this.startHeight - e.clientY + this.startY;\n    if (top < 10 || height < 10) return;\n    this.resizeWidget.style.top = top + 'px';\n    this.resizeWidget.style.height = height + 'px';\n  },\n  initBottomDrag: function (e) {\n    this.processIframe();\n    this.startTop = parseInt(document.defaultView.getComputedStyle(this.resizeWidget).top, 10);\n    this.startHeight = parseInt(document.defaultView.getComputedStyle(this.resizeWidget).height, 10);\n    if (e.touches) this.startY = e.touches[0].clientY;else this.startY = e.clientY;\n    this.addListenerMulti(document.documentElement, 'mousemove touchmove', this.doBottomDrag);\n    this.addListenerMulti(document.documentElement, 'mouseup touchend', this.stopDrag);\n  },\n  doBottomDrag: function (e) {\n    let height = 0;\n    if (e.touches) height = this.startHeight + e.touches[0].clientY - this.startY;else height = this.startHeight + e.clientY - this.startY;\n    if (height < 10) return;\n    this.resizeWidget.style.height = height + 'px';\n  },\n  initLeftDrag: function (e) {\n    this.processIframe();\n    this.startLeft = parseInt(document.defaultView.getComputedStyle(this.resizeWidget).left, 10);\n    this.startWidth = parseInt(document.defaultView.getComputedStyle(this.resizeWidget).width, 10);\n    if (e.touches) this.startX = e.touches[0].clientX;else this.startX = e.clientX;\n    this.addListenerMulti(document.documentElement, 'mousemove touchmove', this.doLeftDrag);\n    this.addListenerMulti(document.documentElement, 'mouseup touchend', this.stopDrag);\n  },\n  doLeftDrag: function (e) {\n    let left, width;\n    if (e.touches) e = e.touches[0];\n    left = this.startLeft + e.clientX - this.startX;\n    width = this.startWidth - e.clientX + this.startX;\n    if (width < 10) return;\n    this.resizeWidget.style.left = left + 'px';\n    this.resizeWidget.style.width = width + 'px';\n  },\n  initRightDrag: function (e) {\n    this.processIframe();\n    this.startWidth = parseInt(document.defaultView.getComputedStyle(this.resizeWidget).width, 10);\n    if (e.touches) this.startX = e.touches[0].clientX;else this.startX = e.clientX;\n    this.addListenerMulti(document.documentElement, 'mousemove touchmove', this.doRightDrag);\n    this.addListenerMulti(document.documentElement, 'mouseup touchend', this.stopDrag);\n  },\n  doRightDrag: function (e) {\n    let width = 0;\n    if (e.touches) width = this.startWidth + e.touches[0].clientX - this.startX;else width = this.startWidth + e.clientX - this.startX;\n    if (width < 10) return;\n    this.resizeWidget.style.width = width + 'px';\n  },\n  stopDrag: function (e) {\n    this.resizeWidget.querySelectorAll('iframe').forEach(function (item) {\n      item.style.pointerEvents = null;\n    });\n    this.removeListenerMulti(document.documentElement, 'mousemove touchmove', this.doTopDrag);\n    this.removeListenerMulti(document.documentElement, 'mousemove touchmove', this.doBottomDrag);\n    this.removeListenerMulti(document.documentElement, 'mousemove touchmove', this.doLeftDrag);\n    this.removeListenerMulti(document.documentElement, 'mousemove touchmove', this.doRightDrag);\n    this.removeListenerMulti(document.documentElement, 'mouseup touchend', this.stopDrag);\n  },\n  checkTopDragLeftCorner: function (e) {\n    let offsetX,\n        scrollLeft = document.documentElement.scrollLeft;\n    if (e.touches) e = e.touches[0];\n    offsetX = e.clientX - this.getLeftDistance(this.topDrag) + scrollLeft;\n    this.removeListenerMulti(this.topDrag, 'mousedown touchstart', this.initTopDrag);\n    this.removeListenerMulti(this.topDrag, 'mousedown touchstart', this.initLeftDrag);\n    this.addListenerMulti(this.topDrag, 'mousedown touchstart', this.initTopDrag);\n\n    if (offsetX < this.cornerSize && this.leftDrag) {\n      this.topDrag.style.cursor = 'se-resize';\n      this.addListenerMulti(this.topDrag, 'mousedown touchstart', this.initLeftDrag);\n    } else {\n      this.topDrag.style.cursor = 's-resize';\n    }\n  },\n  checkLeftDragTopCorner: function (e) {\n    let offsetY,\n        scrollTop = document.documentElement.scrollTop;\n    if (e.touches) e = e.touches[0];\n    offsetY = e.clientY - this.getTopDistance(this.leftDrag) + scrollTop;\n    this.removeListenerMulti(this.leftDrag, 'mousedown touchstart', this.initLeftDrag);\n    this.removeListenerMulti(this.leftDrag, 'mousedown touchstart', this.initTopDrag);\n    this.addListenerMulti(this.leftDrag, 'mousedown touchstart', this.initLeftDrag);\n\n    if (offsetY < this.cornerSize && this.topDrag) {\n      this.leftDrag.style.cursor = 'se-resize';\n      this.addListenerMulti(this.leftDrag, 'mousedown touchstart', this.initTopDrag);\n    } else {\n      this.leftDrag.style.cursor = 'e-resize';\n    }\n  },\n  checkTopDragRightCorner: function (e) {\n    let offsetX,\n        scrollLeft = document.documentElement.scrollLeft;\n    this.removeListenerMulti(this.topDrag, 'mousedown touchstart', this.initTopDrag);\n    this.removeListenerMulti(this.topDrag, 'mousedown touchstart', this.initRightDrag);\n    this.addListenerMulti(this.topDrag, 'mousedown touchstart', this.initTopDrag);\n\n    if (this.rightDrag) {\n      if (e.touches) e = e.touches[0];\n      offsetX = this.getLeftDistance(this.rightDrag) - e.clientX - scrollLeft;\n\n      if (offsetX < this.cornerSize) {\n        this.topDrag.style.cursor = 'ne-resize';\n        this.addListenerMulti(this.topDrag, 'mousedown touchstart', this.initRightDrag);\n      } else if (!this.leftDrag) {\n        this.topDrag.style.cursor = 's-resize';\n      }\n    }\n  },\n  checkRightDragTopCorner: function (e) {\n    let offsetY,\n        scrollTop = document.documentElement.scrollTop;\n    this.removeListenerMulti(this.rightDrag, 'mousedown touchstart', this.initRightDrag);\n    this.removeListenerMulti(this.rightDrag, 'mousedown touchstart', this.initTopDrag);\n    this.addListenerMulti(this.rightDrag, 'mousedown touchstart', this.initRightDrag);\n\n    if (this.topDrag) {\n      if (e.touches) e = e.touches[0];\n      offsetY = e.clientY - this.getTopDistance(this.topDrag) + scrollTop;\n\n      if (offsetY < this.cornerSize) {\n        this.rightDrag.style.cursor = 'ne-resize';\n        this.addListenerMulti(this.rightDrag, 'mousedown touchstart', this.initTopDrag);\n      } else {\n        this.rightDrag.style.cursor = 'e-resize';\n      }\n    }\n  },\n  checkBottomDragLeftCorner: function (e) {\n    let offsetX,\n        scrollLeft = document.documentElement.scrollLeft;\n    if (e.touches) e = e.touches[0];\n    offsetX = e.clientX - this.getLeftDistance(this.bottomDrag) + scrollLeft;\n    this.removeListenerMulti(this.bottomDrag, 'mousedown touchstart', this.initBottomDrag);\n    this.removeListenerMulti(this.bottomDrag, 'mousedown touchstart', this.initLeftDrag);\n    this.addListenerMulti(this.bottomDrag, 'mousedown touchstart', this.initBottomDrag);\n\n    if (offsetX < this.cornerSize && this.leftDrag) {\n      this.bottomDrag.style.cursor = 'ne-resize';\n      this.addListenerMulti(this.bottomDrag, 'mousedown touchstart', this.initLeftDrag);\n    } else {\n      this.bottomDrag.style.cursor = 's-resize';\n    }\n  },\n  checkLeftDragBottomCorner: function (e) {\n    let offsetY,\n        scrollTop = document.documentElement.scrollTop;\n    this.removeListenerMulti(this.leftDrag, 'mousedown touchstart', this.initLeftDrag);\n    this.removeListenerMulti(this.leftDrag, 'mousedown touchstart', this.initBottomDrag);\n    this.addListenerMulti(this.leftDrag, 'mousedown touchstart', this.initLeftDrag);\n\n    if (this.bottomDrag) {\n      if (e.touches) e = e.touches[0];\n      offsetY = this.getTopDistance(this.bottomDrag) - e.clientY - scrollTop;\n\n      if (offsetY < this.cornerSize) {\n        this.leftDrag.style.cursor = 'ne-resize';\n        this.addListenerMulti(this.leftDrag, 'mousedown touchstart', this.initBottomDrag);\n      } else if (!this.topDrag) {\n        this.leftDrag.style.cursor = 'e-resize';\n      }\n    }\n  },\n  checkBottomDragRightCorner: function (e) {\n    let offsetX,\n        scrollLeft = document.documentElement.scrollLeft;\n    this.removeListenerMulti(this.bottomDrag, 'mousedown touchstart', this.initBottomDrag);\n    this.removeListenerMulti(this.bottomDrag, 'mousedown touchstart', this.initRightDrag);\n    this.addListenerMulti(this.bottomDrag, 'mousedown touchstart', this.initBottomDrag);\n\n    if (this.rightDrag) {\n      if (e.touches) e = e.touches[0];\n      offsetX = this.getLeftDistance(this.rightDrag) - e.clientX - scrollLeft;\n\n      if (offsetX < this.cornerSize) {\n        this.bottomDrag.style.cursor = 'se-resize';\n        this.addListenerMulti(this.bottomDrag, 'mousedown touchstart', this.initRightDrag);\n      } else if (!this.leftDrag) {\n        this.bottomDrag.style.cursor = 's-resize';\n      }\n    }\n  },\n  checkRightDragBottomCorner: function (e) {\n    let offsetY,\n        scrollTop = document.documentElement.scrollTop;\n    this.removeListenerMulti(this.rightDrag, 'mousedown touchstart', this.initRightDrag);\n    this.removeListenerMulti(this.rightDrag, 'mousedown touchstart', this.initBottomDrag);\n    this.addListenerMulti(this.rightDrag, 'mousedown touchstart', this.initRightDrag);\n\n    if (this.bottomDrag) {\n      if (e.touches) e = e.touches[0];\n      offsetY = this.getTopDistance(this.bottomDrag) - e.clientY - scrollTop;\n\n      if (offsetY < this.cornerSize) {\n        this.rightDrag.style.cursor = 'se-resize';\n        this.addListenerMulti(this.rightDrag, 'mousedown touchstart', this.initBottomDrag);\n      } else if (!this.topDrag) {\n        this.rightDrag.style.cursor = 'e-resize';\n      }\n    }\n  },\n  bindListeners: function () {\n    this.initLeftDrag = this.initLeftDrag.bind(this);\n    this.doLeftDrag = this.doLeftDrag.bind(this);\n    this.initTopDrag = this.initTopDrag.bind(this);\n    this.doTopDrag = this.doTopDrag.bind(this);\n    this.initRightDrag = this.initRightDrag.bind(this);\n    this.doRightDrag = this.doRightDrag.bind(this);\n    this.initBottomDrag = this.initBottomDrag.bind(this);\n    this.doBottomDrag = this.doBottomDrag.bind(this);\n    this.stopDrag = this.stopDrag.bind(this);\n    this.checkTopDragLeftCorner = this.checkTopDragLeftCorner.bind(this);\n    this.checkLeftDragTopCorner = this.checkLeftDragTopCorner.bind(this);\n    this.checkTopDragRightCorner = this.checkTopDragRightCorner.bind(this);\n    this.checkRightDragTopCorner = this.checkRightDragTopCorner.bind(this);\n    this.checkBottomDragLeftCorner = this.checkBottomDragLeftCorner.bind(this);\n    this.checkLeftDragBottomCorner = this.checkLeftDragBottomCorner.bind(this);\n    this.checkBottomDragRightCorner = this.checkBottomDragRightCorner.bind(this);\n    this.checkRightDragBottomCorner = this.checkRightDragBottomCorner.bind(this);\n  },\n  // Get an element's distance from the top of the page\n  getTopDistance: function (elem) {\n    var location = 0;\n\n    if (elem.offsetParent) {\n      do {\n        location += elem.offsetTop;\n        elem = elem.offsetParent;\n      } while (elem);\n    }\n\n    return location >= 0 ? location : 0;\n  },\n  // Get an element's distance from the left of the page\n  getLeftDistance: function (elem) {\n    var location = 0;\n\n    if (elem.offsetParent) {\n      do {\n        location += elem.offsetLeft;\n        elem = elem.offsetParent;\n      } while (elem);\n    }\n\n    return location >= 0 ? location : 0;\n  },\n  // Bind multiiple events to a listener\n  addListenerMulti: function (element, eventNames, listener) {\n    var events = eventNames.split(' ');\n\n    for (var i = 0, iLen = events.length; i < iLen; i++) {\n      element.addEventListener(events[i], listener, false);\n    }\n  },\n  // Remove multiiple events from a listener\n  removeListenerMulti: function (element, eventNames, listener) {\n    var events = eventNames.split(' ');\n\n    for (var i = 0, iLen = events.length; i < iLen; i++) {\n      element.removeEventListener(events[i], listener, false);\n    }\n  },\n  // style=\"pointer-events:none\" for iframe when drag event starts\n  processIframe: function () {\n    this.resizeWidget.querySelectorAll('iframe').forEach(function (item) {\n      item.style.pointerEvents = 'none';\n    });\n  }\n};\n\n_observer.default.init({\n  name: 'CoCreateResize',\n  observe: ['subtree', 'childList'],\n  include: '.resize',\n  callback: function (mutation) {\n    coCreateResizeWidgets.initElement(mutation.target);\n  }\n});\n\nvar _default = coCreateResizeWidgets;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n")},"../../node_modules/file-loader/dist/cjs.js!./src/style.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + "7e1a7cc70b71737772c88bd8abbe216f.css");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZVJlc2l6ZS8uL3NyYy9zdHlsZS5jc3M/NzczMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUscUJBQXVCLHlDQUF5QyIsImZpbGUiOiIuLi8uLi9ub2RlX21vZHVsZXMvZmlsZS1sb2FkZXIvZGlzdC9janMuanMhLi9zcmMvc3R5bGUuY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjdlMWE3Y2M3MGI3MTczNzc3MmM4OGJkOGFiYmUyMTZmLmNzc1wiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/file-loader/dist/cjs.js!./src/style.css\n')},"./src/style.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js */ "../../node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_file_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../node_modules/file-loader/dist/cjs.js!./style.css */ "../../node_modules/file-loader/dist/cjs.js!./src/style.css");\n\n            \n\nvar options = {"injectType":"linkTag"};\n\noptions.insert = "head";\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_file_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_1__.default, options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZVJlc2l6ZS8uL3NyYy9zdHlsZS5jc3M/MDE3ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQThGO0FBQzlGLFlBQThGOztBQUU5RixlQUFlOztBQUVmOztBQUVBLGFBQWEseUdBQUcsQ0FBQyxvRkFBTzs7OztBQUl4QixpRUFBZSxFIiwiZmlsZSI6Ii4vc3JjL3N0eWxlLmNzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhcGkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvTGlua1RhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge1wiaW5qZWN0VHlwZVwiOlwibGlua1RhZ1wifTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IHt9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/style.css\n')},"../../node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nmodule.exports = function (url, options) {\n  options = options || {};\n  options.attributes = typeof options.attributes === 'object' ? options.attributes : {};\n\n  if (typeof options.attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : 0;\n\n    if (nonce) {\n      options.attributes.nonce = nonce;\n    }\n  }\n\n  var link = document.createElement('link');\n  link.rel = 'stylesheet';\n  link.href = url;\n  Object.keys(options.attributes).forEach(function (key) {\n    link.setAttribute(key, options.attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(link);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(link);\n  }\n\n  return function (newUrl) {\n    if (typeof newUrl === 'string') {\n      link.href = newUrl;\n    } else {\n      link.parentNode.removeChild(link);\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZVJlc2l6ZS8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvTGlua1RhZy5qcz9jMWEwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVEOztBQUV2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCLEtBQXdDLEdBQUcsc0JBQWlCLEdBQUcsQ0FBSTs7QUFFbkY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b0xpbmtUYWcuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMuYXR0cmlidXRlcyA9IHR5cGVvZiBvcHRpb25zLmF0dHJpYnV0ZXMgPT09ICdvYmplY3QnID8gb3B0aW9ucy5hdHRyaWJ1dGVzIDoge307XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgb3B0aW9ucy5hdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XG4gIGxpbmsucmVsID0gJ3N0eWxlc2hlZXQnO1xuICBsaW5rLmhyZWYgPSB1cmw7XG4gIE9iamVjdC5rZXlzKG9wdGlvbnMuYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgbGluay5zZXRBdHRyaWJ1dGUoa2V5LCBvcHRpb25zLmF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChsaW5rKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQobGluayk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG5ld1VybCkge1xuICAgIGlmICh0eXBlb2YgbmV3VXJsID09PSAnc3RyaW5nJykge1xuICAgICAgbGluay5ocmVmID0gbmV3VXJsO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaW5rLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobGluayk7XG4gICAgfVxuICB9O1xufTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js\n")}},__webpack_module_cache__={};function __nested_webpack_require_98044__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var B=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](B,B.exports,__nested_webpack_require_98044__),B.exports}__nested_webpack_require_98044__.n=Q=>{var F=Q&&Q.__esModule?()=>Q.default:()=>Q;return __nested_webpack_require_98044__.d(F,{a:F}),F},__nested_webpack_require_98044__.d=(Q,F)=>{for(var B in F)__nested_webpack_require_98044__.o(F,B)&&!__nested_webpack_require_98044__.o(Q,B)&&Object.defineProperty(Q,B,{enumerable:!0,get:F[B]})},__nested_webpack_require_98044__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__nested_webpack_require_98044__.o=(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),__nested_webpack_require_98044__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},(()=>{var Q;__nested_webpack_require_98044__.g.importScripts&&(Q=__nested_webpack_require_98044__.g.location+"");var F=__nested_webpack_require_98044__.g.document;if(!Q&&F&&(F.currentScript&&(Q=F.currentScript.src),!Q)){var B=F.getElementsByTagName("script");B.length&&(Q=B[B.length-1].src)}if(!Q)throw new Error("Automatic publicPath is not supported in this browser");Q=Q.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__nested_webpack_require_98044__.p=Q})();var __webpack_exports__=__nested_webpack_require_98044__("./src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()},module.exports=F()}}]);